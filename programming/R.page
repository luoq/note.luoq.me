# kronecker product
Use 'kronecker'.
Example:

```R
repmat <- function(a,n,m) {kronecker(matrix(1,n,m),a)}
```

# convert a string to apply scan
```R
tc <- textConnection(file)
```
# timer
```R
system.time(expression)
```

```R
t0 <- Sys.time()
seconds <- as.double( difftime(Sys.time(), t0, u = 'secs'))
```

# record current call
```R
match.call()
```

# go to browser when error
```R
options(error=recover)
```

# treat warning as error
```R
options(warn=2)
```

# get name of object
```R
name <- deparse(substitute(object))
```

# Note "drop" parameter of "[.data.frame"
```R
x <- data.frame(x=1:10)
x[1:5,]
x[1:5,,drop=FALSE]
```

# encompass results in a new list
```R
y<-within(list(),{x=1;y=2;c=x+y})
```

# change dimension order
```R
new.data <- aperm(old.data, c(2,3,1)
```

# eval a string
```R
eval(parse(text="1+1"))
```

# direct product of list
```R
df <- expand.grid(a=c(1,2,3),b=c("a","b"),c=c("x","y"),stringsAsFactors=FALSE)
```

# data.frame to list of list
```R
df.to.list.of.list <- function(x) do.call(function(...) mapply(list,...,SIMPLIFY=FALSE),lapply(x,identity))
```

# list of list to data.frame
```R
list.of.list.to.df <- function(x){
res <- lapply(1:length(x[[1]]),function(i) sapply(x,function(x) x[[i]]))
names(res) <- names(x[[1]])
do.call(function(...) data.frame(...,stringsAsFactors=FALSE),res)
}
```
